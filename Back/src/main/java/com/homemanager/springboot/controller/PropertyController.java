package com.homemanager.springboot.controller;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.configurationprocessor.json.JSONArray;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.springframework.http.ResponseEntity;

import com.homemanager.springboot.model.Property;
import com.homemanager.springboot.repository.PropertyRepository;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class PropertyController {
	@Autowired
	// This means to get the bean called propertyRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private PropertyRepository propertyRepository;
	
	@GetMapping(path="/properties")
	public @ResponseBody Iterable<Property> getAllProperties() {
		// This returns a JSON or XML with the users
		return propertyRepository.findAll();
	}
	
	@PostMapping("/properties")
	public Property createProperty(@RequestBody Property property) {
		return propertyRepository.save(property);
	}
	 
	@GetMapping("/properties/{id}")
	public Property findPropertyById(@PathVariable Integer id) {
		Optional<Property> Property = propertyRepository.findById(id);
		return Property.get();
	}
	
	@GetMapping("/properties/owner/{id}")
	public List<Property> findByOwner_Id(@PathVariable Integer id) {
		return propertyRepository.findByOwner_Id(id);
	}
	 
	@PutMapping("/properties/{id}")
	public ResponseEntity<Property> updateProperty(@PathVariable Integer id, @RequestBody Property propertyDetails){
		Property property = propertyRepository.findById(id)
				.orElseThrow();
		
		property.setTitle(propertyDetails.getTitle());
		property.setDescription(propertyDetails.getDescription());
		property.setAddress(propertyDetails.getAddress());
		property.setCity(propertyDetails.getCity());
		property.setTotal_occupancy(propertyDetails.getTotal_occupancy());
		property.setProperty_type(propertyDetails.getProperty_type());
		property.setProperty_services(propertyDetails.getProperty_services());
		property.setProperty_restrictions(property.getProperty_restrictions());
		
		Property updatedProperty = propertyRepository.save(property);
		return ResponseEntity.ok(updatedProperty);
	}
		
	@DeleteMapping("/properties/{id}")
	public ResponseEntity<Map<String, Boolean>> deleteProperty(@PathVariable Integer id){
		Property property = propertyRepository.findById(id)
				.orElseThrow();
		
		propertyRepository.delete(property);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return ResponseEntity.ok(response);
	}
	
	@PostMapping("/properties/search")
	public List<Property> getEmployeeById(@RequestBody String dataString) throws JSONException {
		
		JSONObject data = new JSONObject(dataString);
		
		List<String> locationsList = convertJSONArrayInArrayList((JSONArray) data.get("locations"));

		/*String dateFrom = data.get("dateFrom").toString();
		String dateTo = data.get("dateTo").toString();
		String servicesList = data.get("services").toString().replace("[", "").replace("]", "");
		String constraintsList = data.get("constraints").toString().replace("[", "").replace("]", "");*/
		
		List<Property> listProperty = propertyRepository.getPropertyBy(
				locationsList/*, 
				data.get("dateFrom").toString(), 
				data.get("dateTo").toString(), 
				data.get("services").toString(), 
				data.get("constraints").toString()*/
				);
		/*Employee employee = propertyRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id :" + id));
		return ResponseEntity.ok(employee);*/

		return listProperty;
	}
	
	private List<String> convertJSONArrayInArrayList(JSONArray jsonArray) throws JSONException{
		
		ArrayList<String> list = new ArrayList<String>();     
		if (jsonArray != null) { 
		   for (int i=0; i < jsonArray.length(); i++){ 
			   list.add(jsonArray.getString(i).toLowerCase());
		   } 
		} 
		return list;
	}
}
