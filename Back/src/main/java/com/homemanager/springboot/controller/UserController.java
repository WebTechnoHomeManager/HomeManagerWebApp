package com.homemanager.springboot.controller;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;

import com.homemanager.springboot.model.User;
import com.homemanager.springboot.repository.UserRepository;

@RestController
@CrossOrigin(origins="http://localhost:3000")
@RequestMapping("/api/v1/")
public class UserController {
	
	@Autowired// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	 
	
	//get all users
	 @GetMapping(path="/users")
	  public @ResponseBody Iterable<User> getAllUsers() {
	    // This returns a JSON or XML with the users
	    return userRepository.findAll();
	  }
	 
	 
	// create employee rest api
		@PostMapping("/users")
		public User createUser(@RequestBody User user) {
			return userRepository.save(user);
		}
	 
	// get user by id rest api
		@GetMapping("/users/{id}")
		public ResponseEntity<User> getUserById(@PathVariable Integer id) {
			User user = userRepository.findById(id)
					.orElseThrow();
			return ResponseEntity.ok(user);
		}
					
	 
	// update user rest api
		@PutMapping("/users/{id}")
		public ResponseEntity<User> updateUser(@PathVariable Integer id, @RequestBody User userDetails){
			User user = userRepository.findById(id)
					.orElseThrow();
			
			user.setFirst_name(userDetails.getFirst_name());
			user.setLast_name(userDetails.getLast_name());
			user.setEmail(userDetails.getEmail());
			user.setPassword(userDetails.getPassword());
			
			User updatedUser = userRepository.save(user);
			return ResponseEntity.ok(updatedUser);
		}
		
		
		// delete user rest api
		@DeleteMapping("/users/{id}")
		public ResponseEntity<Map<String, Boolean>> deleteUser(@PathVariable Integer id){
			User user = userRepository.findById(id)
					.orElseThrow();
			
			userRepository.delete(user);
			Map<String, Boolean> response = new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return ResponseEntity.ok(response);
		}
	 
}
